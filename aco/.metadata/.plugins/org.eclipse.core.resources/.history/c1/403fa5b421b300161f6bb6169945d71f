package engine;

/**
 * La classe Selection représente la sélection de l'utilisateur.
 */
public final class Selection {
	/** Indique l'indice de début de la sélection. */
	private int	start;
	/** Indique l'indice de end de la sélection. */
	private int	end;

	/**
	 * Crée une sélection à partir du début et de la end de celle-ci.
	 *
	 * @param start
	 *            Le début de la sélection (positif ou nul)
	 * @param end
	 *            La end de la sélection (supérieur ou égal à début)
	 */
	public Selection(final int start, final int end) {
		/* Preconditions */
		if (start < 0)
			throw new IllegalArgumentException("Start < 0");
		if (end < 0)
			throw new IllegalArgumentException("End < 0");
		if (end < start)
			throw new IllegalArgumentException("End < Start");
		/* Treatment */
		this.start = start;
		this.end = end;
	}

	/**
	 * Flush the selection by making start and end equal
	 */
	public final void flush() {
		end = start;
	}

	/**
	 * return the selection end.
	 *
	 * @return La end de la sélection
	 */
	public final int getEnd() {
		return end;
	}

	/**
	 * Retourne la longueur de la sélection.
	 *
	 * @return La longueur de la sélection
	 */
	public final int getLongueur() {
		return end - start;
	}

	/**
	 * Retourne le début de la sélection.
	 *
	 * @return Le début de la sélection
	 */
	public final int getStart() {
		return start;
	}

	/**
	 * Retourne vrai si l'indice du début de la sélection est égal à la celui de
	 * la end.
	 *
	 * @return Vrai si la sélection est vide, faux sinon
	 */
	public final boolean isEmpty() {
		return start == end;
	}

	/**
	 * Permet de spécifier une nouvelle sélection à l'aide des indices de début
	 * et de end.
	 *
	 * @param start
	 *            Le début de la sélection (positif ou nul)
	 * @param end
	 *            La end de la sélection (supérieur ou égal à début)
	 */
	public final void setSelection(final int start, final int end) {
		/* Preconditions */
		if (start < 0)
			throw new IllegalArgumentException("Début est négatif");
		if (end < 0)
			throw new IllegalArgumentException("Fin est négatif");
		if (end < start)
			throw new IllegalArgumentException("Fin est inférieur à début");
		/* Treatment */
		this.start = start;
		this.end = end;
	}

	/**
	 * Permet de spécifier une nouvelle sélection à partir d'une autre
	 * sélection.
	 *
	 * @param selection
	 *            La nouvelle selection
	 */
	public final void setSelection(final Selection selection) {
		/* Préconditions */
		if (selection == null)
			throw new IllegalArgumentException("selection est négatif");
		/* Traitement */
		start = selection.getStart();
		end = selection.getEnd();
	}
}