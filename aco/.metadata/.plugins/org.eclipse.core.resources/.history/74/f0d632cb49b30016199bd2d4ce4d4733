package mementos;

import recordables.CommandRecordable;
import editor.Recorder;
import engine.MoteurEdition;

/**
 * La classe MementoCommand sert à stocker l'état des commandes enregistrables.
 * Comme toutes les commandes enregsitrables ont un attribut moteur et recorder, ceux-ci ainsi que les getters/setters qui leurs sont associés sont définis au sein de cette classe abstraite
 * @see CommandRecordable
 * @see Recorder
 */
public abstract class MementoCommand {

	protected MoteurEdition moteur;
	protected Recorder recorder;
	
	/**
	 * Permet de sauvegarder l'attribut moteur d'une commande enregistrable
	 * @param moteur L'attribut moteur de la commande enregistrable (non null)
	 */
	public MementoCommand(MoteurEdition moteur, Recorder recorder){
		
		if(moteur == null){
			
			throw new IllegalArgumentException("moteur est à null");
		}
		
		if(recorder == null){
			
			throw new IllegalArgumentException("recorder est à null");
		}
		
		this.moteur = moteur;
		this.recorder = recorder;
	}
	
	/**
	 * Getter de l'attribut moteur
	 * @return L'attribut moteur de l'objet
	 */
	public final MoteurEdition getMoteur(){
		
		return moteur;
	}
	
	/**
	 * Setter de l'attribut moteur de l'objet
	 * @param moteur Le nouveau moteur (non null)
	 */
	public final void setMoteur(MoteurEdition moteur){
		
		if(moteur == null){
			
			throw new IllegalArgumentException("moteur est à null");
		}
		
		this.moteur = moteur;
	}
	
	/**
	 * Setter de l'attribut recorder de l'objet
	 * @param recorder Le nouvel recorder (non null)
	 */
	public final void setEnregistreur(Recorder recorder){
		
		if(recorder == null){
			
			throw new IllegalArgumentException("recorder est à null");
		}
		
		this.recorder = recorder;
	}
	
	/**
	 * Le getter de l'attribut recorder
	 * @return L'attribut recorder de l'objet
	 */
	public final Recorder getEnregistreur(){
		
		return recorder;
	}
}
