package tests;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Matchers;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import commands.Copy;
import commands.Cut;
import commands.DeleteText;
import commands.InsertText;
import commands.Paste;
import commands.Select;
import engine.EditionEngine;
import engine.ImplementedEngine;
import engine.Selection;

/**
 * The Class TestsUnitairesCommandesv1.
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({ ImplementedEngine.class })
public class TestsUnitairesCommandesv1 {
	
	/** The moteur. */
	private static EditionEngine moteur;

	/**
	 * Instantiates a new tests unitaires commandesv 1.
	 */
	public TestsUnitairesCommandesv1() {
		moteur = PowerMockito.mock(ImplementedEngine.class);
	}

	/**
	 * Test coller.
	 */
	@Test
	public void testColler() {
		new Paste(moteur).execute();
		Mockito.verify(moteur).paste();
	}

	/**
	 * Test copier.
	 */
	@Test
	public void testCopier() {
		new Copy(moteur).execute();
		Mockito.verify(moteur).copy();
	}

	/**
	 * Test couper.
	 */
	@Test
	public void testCouper() {
		new Cut(moteur).execute();
		Mockito.verify(moteur).cut();
	}

	/**
	 * Test inserer texte.
	 */
	@Test
	public void testInsererTexte() {
		new InsertText(moteur, "Test").execute();
		Mockito.verify(moteur).insertText(Matchers.eq("Test"));
	}

	/**
	 * Test selectionner.
	 */
	@Test
	public void testSelectionner() {
		final Selection sel = new Selection(0, 4);
		new Select(moteur, sel).execute();
		Mockito.verify(moteur).select(Matchers.eq(sel));
	}

	/**
	 * Test supprimer texte.
	 */
	@Test
	public void testSupprimerTexte() {
		new DeleteText(moteur).execute();
		Mockito.verify(moteur).deleteText();
	}
}
