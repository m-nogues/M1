package test;

import org.junit.Test;

import engine.Engine;
import engine.EngineImpl;

public class EngineImplTest {

	private Engine engine;

	@Before
	public void setUp() {
		engine = new EngineImpl();
	}

	@Test
	public void testEmptyCut() throws Exception {
		final String clipboard = engine.getClipboard();
		engine.cut();
		assertEquals(clipboard, engine.getClipboard());
	}

	@Test
	public void testValidSelectionCut() throws Exception {
		final String toInsert = "Test data sample";
		final String expectedClipboard = "data";
		final String expectedContent = "Test  sample";
		final int newSelectionStart = 5;
		final int newSelectionEnd = 9;
		engine.insertText(toInsert);
		engine.changeSelection(newSelectionStart, newSelectionEnd);
		engine.cut();
		assertEquals(expectedClipboard, engine.getClipboard());
		assertEquals(expectedContent, engine.getContent());
	}

	@Test
	public void testEmptyCopy() throws Exception {
		final String clipboard = engine.getClipboard();
		engine.copy();
		assertEquals(clipboard, engine.getClipboard());
	}

	@Test
	public void testValidSelectionCopy() throws Exception {
		final String toInsert = "Test data sample";
		final String expectedClipboard = "data";
		final String expectedContent = toInsert;
		final int newSelectionStart = 5;
		final int newSelectionEnd = 9;
		engine.insertText(toInsert);
		engine.changeSelection(newSelectionStart, newSelectionEnd);
		engine.copy();
		assertEquals(expectedClipboard, engine.getClipboard());
		assertEquals(expectedContent, engine.getContent());
	}

	@Test
	public void testEmptyPaste() throws Exception {
		final String content = engine.getContent();
		engine.paste();
		assertEquals(content, engine.getContent());
	}

	@Test
	public void testEmptyPasteWithValidSelection() throws Exception {
		final String toInsert = "Test data sample";
		final String expectedContent = "Test  sample";
		final int newSelectionStart = 5;
		final int newSelectionEnd = 9;
		engine.insertText(toInsert);
		engine.changeSelection(newSelectionStart, newSelectionEnd);
		engine.paste();
		assertEquals(expectedContent, engine.getContent());
	}

	@Test
	public void testCopyPasteWithValidSelections() throws Exception {
		final String toInsert = "Test data sample";
		final String expectedContent = "data data sample";
		final int newSelectionStart = 5;
		final int newSelectionEnd = 9;
		final int newSelectionStart2 = 0;
		final int newSelectionEnd2 = 4;
		engine.insertText(toInsert);
		engine.changeSelection(newSelectionStart, newSelectionEnd);
		engine.copy();
		engine.changeSelection(newSelectionStart2, newSelectionEnd2);
		engine.paste();
		assertEquals(expectedContent, engine.getContent());
	}

	@Test
	public void testInsertText() throws Exception {
		final String toInsert = "Test data sample";
		engine.insertText(toInsert);
		assertEquals(toInsert, engine.getContent());
	}

	@Test
	public void testInsertTextWithValidSelection() throws Exception {
		final String toInsert = "Test data sample";
		final String toInsert2 = "my new data";
		final String expectedContent = "Test my new data sample";
		final int newSelectionStart = 5;
		final int newSelectionEnd = 9;
		engine.insertText(toInsert);
		engine.changeSelection(newSelectionStart, newSelectionEnd);
		engine.insertText(toInsert2);
		assertEquals(expectedContent, engine.getContent());
	}

	@Test
	public void testGetContent() throws Exception {
		assertTrue(engine.getContent().equals(""));
	}

	@Test
	public void testValidChangeSelection() throws Exception {
		final String toInsert = "Test data sample";
		final int newSelectionStart = 3;
		final int newSelectionEnd = 5;
		engine.insertText(toInsert);
		engine.changeSelection(newSelectionStart, newSelectionEnd);
		assertEquals(newSelectionStart, engine.getSelectionStart());
		assertEquals(newSelectionEnd, engine.getSelectionEnd());
	}

	@Test
	public void testInvalidChangeSelectionNegativeStartOutOfBondsEnd() throws Exception {
		final String toInsert = "Test data sample";
		final int newSelectionStart = -8;
		final int newSelectionEnd = 25;
		final int expectedSelectionStart = 0;
		final int expectedSelectionEnd = toInsert.length();
		engine.insertText(toInsert);
		engine.changeSelection(newSelectionStart, newSelectionEnd);
		assertEquals(expectedSelectionStart, engine.getSelectionStart());
		assertEquals(expectedSelectionEnd, engine.getSelectionEnd());
	}

	@Test
	public void testInvalidChangeSelectionStartGreaterThanEnd() throws Exception {
		final String toInsert = "Test data sample";
		final int newSelectionStart = 5;
		final int newSelectionEnd = 3;
		final int expectedSelectionStart = newSelectionEnd;
		final int expectedSelectionEnd = newSelectionStart;
		engine.insertText(toInsert);
		engine.changeSelection(newSelectionStart, newSelectionEnd);
		assertEquals(expectedSelectionStart, engine.getSelectionStart());
		assertEquals(expectedSelectionEnd, engine.getSelectionEnd());
	}
}