package recordables;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import commands.Coller;
import editor.Recorder;
import engine.MoteurEdition;
import mementos.MementoCommand;
import mementos.MementoPaste;

/**
 * La classe PasteRecordable execute une commande Coller et enregistre son
 * MementoCommand dans un Recorder
 * 
 * @see Recorder
 * @see Coller
 * @see CommandRecordable
 */
public final class PasteRecordable implements CommandRecordable {

	/**
	 * Logger pour suivre le déroulement de l'application
	 */
	private static final Logger LOGGER = LogManager.getLogger(PasteRecordable.class.getName());

	private Recorder		recorder;
	private MoteurEdition	moteur;

	/**
	 * Créé une Command PasteRecordable à partir d'un MementoPaste et execute
	 * une commande Coller
	 * 
	 * @param memento
	 *            Le memento duquel on restaure l'état de la commande
	 *            enregistrable
	 */
	public PasteRecordable(MementoCommand memento) {

		restaurer(memento);
		LOGGER.trace("Rejeu d'une commande PasteRecordable");
		new Coller(moteur).executer();
	}

	/**
	 * Créé une commande PasteRecordable
	 * L'ensemble des paramètres doit être renseigné
	 * 
	 * @param engine
	 *            Le MoteurEdition auquel adresser la commande
	 * @param recorder
	 *            L'enregsitreur de commande
	 */
	public PasteRecordable(MoteurEdition moteur, Recorder recorder) {

		/* Préconditions */
		if (recorder == null)
			throw new IllegalArgumentException("recorder is null");
		if (moteur == null)
			throw new IllegalArgumentException("engine is null");

		/* Traitement */

		this.recorder = recorder;
		this.moteur = moteur;
	}

	/**
	 * Effectue l'enregistrement de la commande auprès de l'recorder et execute
	 * la commande auprès du engine
	 */
	@Override
	public final void executer() {

		recorder.enregistrer(this);
		LOGGER.trace("Exécution d'une commande PasteRecordable");
		new Coller(moteur).executer();
	}

	/**
	 * Retour l'état de l'objet sous forme d'un objet MementoPaste
	 * 
	 * @see MementoPaste
	 */
	@Override
	public final MementoCommand getMemento() {

		return new MementoPaste(moteur, recorder);
	}

	/**
	 * Restaure l'état d'une commande à partir d'un memento
	 * 
	 * @param memento
	 *            L'objet memento de la classe MementoPaste (non null)
	 * @see MementoPaste
	 */
	@Override
	public final void restaurer(MementoCommand memento) {

		/* Préconditions */
		if (memento == null)
			throw new IllegalArgumentException("memento is null");

		if (!(memento instanceof MementoPaste))
			throw new IllegalArgumentException("Le memento n'est pas de la classe MementoPaste");

		LOGGER.trace("Restauration d'une commande PasteRecordable à partir d'un memento");

		/* Traitement */
		moteur = memento.getEngine();
		recorder = memento.getRecorder();
	}
}
