package editor;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import commands.Redo;
import commands.Undo;
import mementos.MementoSysteme;

/**
 * Cette classe est chargée de gérer les actions défaire/redo lorsque
 * l'utilisateur les demandent au travers des commandes portant le même nom
 *
 * @see Undo
 * @see Redo
 */
public class HistoryManager implements Observable {

	private static final Logger LOGGER = LogManager.getLogger(HistoryManager.class.getName());

	private Stack<MementoSysteme>	undo;
	private Stack<MementoSysteme>	redo;

	private List<Observer> listObservers;

	public HistoryManager() {

		undo = new Stack<>();
		redo = new Stack<>();
		listObservers = new ArrayList<>();
	}

	/**
	 * Permet d'ajouter un état du système au gestionnaire d'historique
	 *
	 * @param memSysteme
	 *            Le MementoSysteme contenant l'état du système
	 * @see MementoSysteme
	 */
	public void addElement(MementoSysteme memSysteme) {

		// Faire un redo n'aurait pas de sens
		if (!redo.empty())
			redo.clear();

		undo.push(memSysteme);

		System.out.println("Taille de undo :" + undo.size());
		notifyObservers();
	}

	@Override
	public void addObserver(Observer o) {
		/* Precondition */
		if (o == null)
			throw new IllegalArgumentException("o is null");
		if (listObservers.contains(o))
			throw new IllegalArgumentException("o is already subscribed");

		/* Treatment */
		listObservers.add(o);
	}

	/**
	 * Rétablit le système à l'état T-1 (T représentant le temps au moment de
	 * l'exécution de cette méthode)
	 *
	 * @return Un MementoSysteme permettant de rétablir le système à l'état T-1
	 * @see MementoSysteme
	 */
	public MementoSysteme undo() {

		LOGGER.trace("On effectue un undo");

		if (undo.size() > 1) {

			MementoSysteme memSysteme = undo.pop();
			redo.push(memSysteme);
		}

		notifyObservers();
		return undo.peek();
	}

	@Override
	public void notifyObservers() {
		for (Observer o : listObservers)
			o.update(this);
	}

	/**
	 * @return True si on peut effectuer une action undo, False sinon
	 */
	public boolean canUndo() {

		return undo.size() > 1;
	}

	/**
	 * @return True si on peut effectuer une action redo, False sinon
	 */
	public boolean canRedo() {

		return !redo.empty();
	}

	/**
	 * Permet d'annuler une action undo
	 *
	 * @return Un MementoSysteme permettant de rétablir le système à l'état T+1
	 *         (précédemment T-1)
	 * @see MementoSysteme
	 */
	public MementoSysteme redo() {

		LOGGER.trace("On effectue un redo");

		MementoSysteme memSysteme = redo.pop();
		undo.push(memSysteme);

		notifyObservers();
		return memSysteme;
	}

	@Override
	public void removeObserver(Observer o) {
		/* Precondition */
		if (o == null)
			throw new IllegalArgumentException("o is null");
		if (!listObservers.contains(o))
			throw new IllegalArgumentException("o is not subscribed");

		/* Treatment */
		listObservers.remove(o);
	}
}
