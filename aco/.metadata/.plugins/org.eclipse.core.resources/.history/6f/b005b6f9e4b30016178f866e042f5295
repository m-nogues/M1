package mementos;

import editor.Recorder;
import engine.EditionEngine;
import recordables.CommandRecordable;

/**
 * MementoCommand is used to store the state of recordable commands. It defines
 * stores the engine and the recorder of recordable commands and define their
 * getter and setter.
 *
 * @see CommandRecordable
 * @see Recorder
 */
public abstract class MementoCommand {

	/** The engine. */
	protected EditionEngine engine;

	/** The recorder. */
	protected Recorder recorder;

	/**
	 * Instantiate a MementoCommand that will store the state of a command (given engine and recorder).
	 *
	 * @param engine
	 *            the engine to store
	 * @param recorder
	 *            the recorder to store
	 */
	public MementoCommand(EditionEngine engine, Recorder recorder) {
		if (engine == null)
			throw new IllegalArgumentException("engine is null");

		if (recorder == null)
			throw new IllegalArgumentException("recorder is null");

		this.engine = engine;
		this.recorder = recorder;
	}

	/**
	 * Getter de l'attribut engine.
	 *
	 * @return L'attribut engine de l'objet
	 */
	public final EditionEngine getEngine() {

		return engine;
	}

	/**
	 * Le getter de l'attribut recorder.
	 *
	 * @return L'attribut recorder de l'objet
	 */
	public final Recorder getRecorder() {
		return recorder;
	}

	/**
	 * Setter de l'attribut engine de l'objet.
	 *
	 * @param engine
	 *            Le nouveau engine (non null)
	 */
	public final void setEngine(EditionEngine engine) {

		if (engine == null)
			throw new IllegalArgumentException("engine is null");

		this.engine = engine;
	}

	/**
	 * Setter de l'attribut recorder de l'objet.
	 *
	 * @param recorder
	 *            Le nouvel recorder (non null)
	 */
	public final void setRecorder(Recorder recorder) {

		if (recorder == null)
			throw new IllegalArgumentException("recorder is null");

		this.recorder = recorder;
	}
}
